@page "/"
@using System.Diagnostics
@using Deedle
@using WSeminar.V2G.Simulator.Server.Smard
@inject IJSRuntime JsRuntime
@inject NavigationManager Nav
@inject SmardClient Client
@inject ScenarioService ScenarioService
@inject ILogger<Index> Logger
<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?"/>

<div class="mb-3 row gx-3 gy-2 align-items-center">
    <div class="col-auto">
        <div class="input-group">
            <label class="input-group-text">Start</label>
            <input @ref="StartPicker" class="form-control" type="date" @bind="StartDate"/>
            <button title="Zeitraum auf eine Woche setzen" class="btn btn-outline-secondary" @onclick="SetOneWeek">
                <i class="bi bi-calendar2-week-fill"></i>
            </button>
        </div>
    </div>

    <div class="col-auto">
        <div class="input-group">
            <label class="input-group-text">Ende</label>
            <input class="form-control" type="date" @bind="DisplayedEndDate"/>
            <button title="Auf Gestern setzen" class="btn btn-outline-secondary" @onclick="SetYesterday">
                <i class="bi bi-calendar2-day-fill"></i>
            </button>
        </div>
    </div>

    <div class="col-auto">
        <button @onclick="Update" class="btn btn-primary">
            Anwenden
        </button>
    </div>
</div>

@if (_scenarioResult != null)
{
    var options = new ApexChartOptions<BoxPair>()
    {
        Xaxis = new XAxis()
        {
            Min = StartDate.AddHours(-1).ToUnixTimeMilliseconds(),
            Max = EndDate.AddHours(1).ToUnixTimeMilliseconds(),
            Labels = new XAxisLabels()
            {
                DatetimeUTC = false,
            },
            Type = XAxisType.Datetime
        },
        Chart = new Chart
        {
            Stacked = true,
        },
    };

    options.Tooltip = new Tooltip()
    {
        Enabled = true,
        X = new TooltipX()
        {
            Format = "dd.MM\u3000HH:mm"
        }
    };

    @*
    var l = _lastProductionData
        .SelectMany(pair =>
            pair.Value.Select(item => (EnergySource: pair.Key, SeriesItem: item)));

    var sum = l.GroupBy(tuple => tuple.SeriesItem.Time)
        .Select(tuples =>
            new SeriesItem(
                tuples.Key,
                tuples.Aggregate(0m, (i, tuple) => i + (tuple.SeriesItem.Value ?? 0)),
                tuples.First().SeriesItem.Resolution));
    *@
    <ApexChart @ref="_chartRef" TItem="BoxPair" Options="options">

        @*
        <ApexPointSeries SeriesType="SeriesType.Line"
                         TItem="SeriesItem" Items="@sum"
                         XValue="item => item.Time"
                         YValue="item => item.Value">

        </ApexPointSeries> *@

        <ApexPointSeries
            TItem="BoxPair"
            Items="_scenarioResult.OtherRenewable.Zip(_scenarioResult.Consumption).SelectAllValues(tuple => Math.Min(tuple!.Item1.ValueOrDefault, tuple.Item2.ValueOrDefault)).Observations.Select(pair => new BoxPair(pair))"
            SeriesType="SeriesType.Area"
            Name="Andere Erneuerbare"
            XValue="pair => pair.Key"
            YValue="pair => (decimal?) pair.Value">
        </ApexPointSeries>
        
        <ApexPointSeries
            TItem="BoxPair"
            Items="_scenarioResult.OtherRenewable.Zip(_scenarioResult.Consumption).SelectAllValues(tuple => Math.Min(tuple!.Item1.ValueOrDefault, tuple.Item2.ValueOrDefault)).Observations.Select(pair => new BoxPair(pair))"
            SeriesType="SeriesType.Area"
            Name="Andere Erneuerbare"
            XValue="pair => pair.Key"
            YValue="pair => (decimal?) pair.Value">
        </ApexPointSeries>
        
        <ApexPointSeries
            TItem="BoxPair"
            Items="(_scenarioResult.OtherRenewable + _scenarioResult.Solar).Zip(_scenarioResult.Consumption).SelectAllValues(tuple => Math.Min(tuple!.Item1.ValueOrDefault, tuple.Item2.ValueOrDefault)).Observations.Select(pair => new BoxPair(pair))"
            SeriesType="SeriesType.Area"
            Name="Andere Erneuerbare"
            XValue="pair => pair.Key"
            YValue="pair => (decimal?) pair.Value">
        </ApexPointSeries>
        
        <ApexPointSeries
            TItem="BoxPair"
            Items="_scenarioResult.OtherRenewable.Zip(_scenarioResult.Consumption).SelectAllValues(tuple => Math.Min(tuple!.Item1.ValueOrDefault, tuple.Item2.ValueOrDefault)).Observations.Select(pair => new BoxPair(pair))"
            SeriesType="SeriesType.Scatter"
            Name="Andere Erneuerbare"
            XValue="pair => pair.Key"
            YValue="pair => (decimal?) pair.Value">
        </ApexPointSeries>
        

        <ApexPointSeries TItem="BoxPair"
                         Items="_scenarioResult.Frame[CalculationColumn.Consumption].Observations.Select(pair => new BoxPair(pair))"
                         SeriesType="SeriesType.Line"
                         Name="Verbrauch"
                         XValue="item => item.Key"
                         YValue="(item => (decimal?)item.Value)">
        </ApexPointSeries>


    </ApexChart>
}

@code
{

    public DateTimeOffset StartDate { get; set; }
    private DateTimeOffset DisplayedEndDate { get; set; }

    public DateTimeOffset EndDate
    {
        get => DisplayedEndDate.AddDays(1);
        set => DisplayedEndDate = value.AddDays(-1);
    }

    public string? TestValue { get; set; }

    private ApexChart<BoxPair>? _chartRef;

    private ScenarioResult? _scenarioResult;

    private Dictionary<EnergySourceId, Series<DateTimeOffset, double?>> _lastProductionData;

    protected override void OnInitialized()
    {
        SetYesterday();
        SetOneWeek();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _module = await JsRuntime.InvokeAsync<IJSObjectReference>(
            "import", "./Pages/Index.razor.js");
    }


    private void Callback()
    {
        _module.InvokeVoidAsync("selectInput", StartPicker);
    }

    private IJSObjectReference _module;
    public ElementReference StartPicker { get; set; }

    private TimeSpan _timeSpan { get; set; }

    private async Task LoadIndex()
    {
        var s = Stopwatch.StartNew();

        s.Stop();
        _timeSpan = s.Elapsed;
    }

    private async Task Update()
    {
        var s = Stopwatch.StartNew();

        var scenario = new ScenarioInput()
        {
            Start = StartDate,
            End = EndDate,
            Resolution = DataResolution.QuarterHour,
            BatteryCount = 50_000_000,
            BatteryCapacity = 50_000,
            MaxAllowedDrainFactor = 99,
            SolarFactor = 1,
            WindFactor = 1,
        };

        var result = await ScenarioService.Calculate(scenario);

        s.Stop();
        Logger.LogInformation("{Elapsed}ms", s.ElapsedMilliseconds);

        _scenarioResult = result;

    //_production = vals.First().Value.Select(item => new SeriesItem(item.Time, item.Time.DayOfWeek is DayOfWeek.Saturday ? null : item.Value, item.Resolution)).Where(item => item.Value != null).ToList();
    //StateHasChanged();
    //await Task.Delay(1000);

        Logger.LogInformation("Fetched Entries ({Count})", result.Consumption.KeyCount);
        if (_chartRef != null)
        {
            Logger.LogInformation("Updating Series");
            StateHasChanged();
    //await Task.Delay(3000);

            await _chartRef.ResetSeriesAsync(true, true);
            await _chartRef.UpdateSeriesAsync(false);
            await _chartRef.UpdateOptionsAsync(true, false, true);
        }
    }

    private void SetOneWeek()
    {
        StartDate = EndDate.AddDays(-6);
    }

    private void SetYesterday()
    {
        EndDate = DateTime.Today;
    }
}