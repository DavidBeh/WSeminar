@page "/"
@using System.Diagnostics
@using System.Drawing
@using Deedle
@using WSeminar.V2G.Simulator.Server.Smard
@using Color = System.Drawing.Color
@inject IJSRuntime JsRuntime
@inject NavigationManager Nav
@inject SmardClient Client
@inject ScenarioService ScenarioService
@inject ILogger<Index> Logger
<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?"/>

<div class="mb-3 row gx-3 gy-2 align-items-center">
    <div class="col-auto">
        <div class="input-group">
            <label class="input-group-text">Start</label>
            <input @ref="StartPicker" class="form-control" type="date" @bind="StartDate"/>
            <button title="Zeitraum auf eine Woche setzen" class="btn btn-outline-secondary" @onclick="SetOneWeek">
                <i class="bi bi-calendar2-week-fill"></i>
            </button>
        </div>
    </div>

    <div class="col-auto">
        <div class="input-group">
            <label class="input-group-text">Ende</label>
            <input class="form-control" type="date" @bind="DisplayedEndDate"/>
            <button title="Auf Gestern setzen" class="btn btn-outline-secondary" @onclick="SetYesterday">
                <i class="bi bi-calendar2-day-fill"></i>
            </button>
        </div>
    </div>

    <div class="col-auto">
        <button @onclick="Update" class="btn btn-primary">
            Anwenden
        </button>
    </div>
</div>

@if (_scenarioResult != null)
{
@*
    var l = _lastProductionData
        .SelectMany(pair =>
            pair.Value.Select(item => (EnergySource: pair.Key, SeriesItem: item)));

    var sum = l.GroupBy(tuple => tuple.SeriesItem.Time)
        .Select(tuples =>
            new SeriesItem(
                tuples.Key,
                tuples.Aggregate(0m, (i, tuple) => i + (tuple.SeriesItem.Value ?? 0)),
                tuples.First().SeriesItem.Resolution));
    *@
    <ApexChart @ref="_chartRef" TItem="ScenarioRow" Options="_chartOptions">

        <ApexPointSeries
            TItem="ScenarioRow"
            Color="@Color.LightSeaGreen.ToHex()"
            Stroke="@Color.LightSeaGreen.ToHexStroke()"
            Items="_scenarioResult.Rows"
            SeriesType="SeriesType.Area"
            Name="Andere Erneuerbare (verbraucht)"
            XValue="pair => pair.Time"
            YValue="pair => (decimal?)pair.DisplayOtherRenewable">
        </ApexPointSeries>

        <ApexPointSeries
            TItem="ScenarioRow"
            Color="@Color.DeepSkyBlue.ToHex()"
            Stroke="@Color.DeepSkyBlue.ToHexStroke()"
            Items="_scenarioResult.Rows"
            SeriesType="SeriesType.Area"
            Name="Wind Onshore (verbraucht)"
            XValue="pair => pair.Time"
            YValue="pair => (decimal?)pair.DisplayOnShore">
        </ApexPointSeries>

        <ApexPointSeries
            TItem="ScenarioRow"
            Color="@Color.SkyBlue.ToHex()"
            Stroke="@Color.SkyBlue.ToHexStroke()"
            Items="_scenarioResult.Rows"
            SeriesType="SeriesType.Area"
            Name="Wind Offshore (verbraucht)"
            XValue="pair => pair.Time"
            YValue="pair => (decimal?)pair.DisplayOffShore">
        </ApexPointSeries>

	    <ApexPointSeries

		    TItem="ScenarioRow"
		    Color="@Color.Yellow.ToHex()"
		    Stroke="@Color.Yellow.ToHexStroke()"
		    Items="_scenarioResult.Rows"
		    SeriesType="SeriesType.Area"
		    Name="Solar (verbraucht)"
		    XValue="pair => pair.Time"
		    YValue="pair => (decimal?)pair.DisplaySolar">
	    </ApexPointSeries>
        
	    <ApexPointSeries
		    TItem="ScenarioRow"
		    Color="@Color.Green.ToHex()"
		    Stroke="@Color.Green.ToHexStroke()"
		    Items="_scenarioResult.Rows"
            Name="Batterien Entladen"
		    XValue="row => row.Time"
		    YValue="row => (decimal?) -Math.Min(row.BatteryCapacityDelta, 0) ">
	    </ApexPointSeries>

	    <ApexPointSeries
            TItem="ScenarioRow"
            Color="@Color.DimGray.ToHex()"
            Stroke="@Color.DimGray.ToHexStroke()"
            Items="_scenarioResult.Rows"
            SeriesType="SeriesType.Area"
            Name="Residuallast"
            XValue="pair => pair.Time"
            YValue="pair => (decimal?)-Math.Min(pair.UnusedProduction, 0)">
        </ApexPointSeries>
        
	    <ApexPointSeries
		    TItem="ScenarioRow"
		    Color="@Color.DarkGreen.ToHex()"
		    Stroke="@Color.DarkGreen.ToHexStroke()"
		    Items="_scenarioResult.Rows"
		    SeriesType="SeriesType.Area"
		    Name="Batterien Laden"
		    XValue="pair => pair.Time"
		    YValue="pair => (decimal?) Math.Max(pair.BatteryCapacityDelta, 0)">
	    </ApexPointSeries>
        
	    <ApexPointSeries
		    TItem="ScenarioRow"
		    Color="@Color.Red.ToHex()"
		    Stroke="@Color.Red.ToHexStroke()"
		    Items="_scenarioResult.Rows"
		    SeriesType="SeriesType.Area"
		    Name="Überproduktion"
		    XValue="pair => pair.Time"
		    YValue="pair => (decimal?) Math.Max(pair.UnusedProduction, 0)">
	    </ApexPointSeries>


        


    </ApexChart>
}

@code
{

    public DateTimeOffset StartDate { get; set; }
    private DateTimeOffset DisplayedEndDate { get; set; }

    public DateTimeOffset EndDate
    {
        get => DisplayedEndDate.AddDays(1);
        set => DisplayedEndDate = value.AddDays(-1);
    }

    public string? TestValue { get; set; }

    private ApexChart<ScenarioRow>? _chartRef;
    private ApexChartOptions<ScenarioRow> _chartOptions = null!;

    private ScenarioResult? _scenarioResult;

    private Dictionary<EnergySourceId, Series<DateTimeOffset, double?>> _lastProductionData;

    protected override void OnInitialized()
    {
        SetYesterday();
        SetOneWeek();

        _chartOptions = new ApexChartOptions<ScenarioRow>()
        {
            Fill = new Fill()
            {
                Type = Enumerable.Repeat(FillType.Solid, 8).ToList(),
                Pattern = new FillPattern()
                {
                    Style = FillPatternStyle.VerticalLines,
                },
                Opacity = Enumerable.Repeat(1d,8).ToList(),
            },
            Xaxis = new XAxis()
            {
                Min = StartDate.AddHours(-1).ToUnixTimeMilliseconds(),
                Max = EndDate.AddHours(1).ToUnixTimeMilliseconds(),
                Labels = new XAxisLabels()
                {
                    DatetimeUTC = false,
                },
                Type = XAxisType.Datetime
            },
            Chart = new Chart
            {
                DropShadow = new DropShadow()
                {
                    Enabled =  false
                },
                Stacked = true,
            },
            Tooltip = new Tooltip()
            {
                Enabled = true,
                X = new TooltipX()
                {
                    Format = "dd.MM\u3000HH:mm"
                },
                InverseOrder = true
            },
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _module = await JsRuntime.InvokeAsync<IJSObjectReference>(
            "import", "./Pages/Index.razor.js");
    }


    private void Callback()
    {
        _module.InvokeVoidAsync("selectInput", StartPicker);
    }

    private IJSObjectReference _module;
    public ElementReference StartPicker { get; set; }

    private TimeSpan _timeSpan { get; set; }

    private async Task LoadIndex()
    {
        var s = Stopwatch.StartNew();

        s.Stop();
        _timeSpan = s.Elapsed;
    }

    private async Task Update()
    {
        var s = Stopwatch.StartNew();

        var scenario = new ScenarioInput()
        {
            Start = StartDate,
            End = EndDate,
            Resolution = DataResolution.Hour,
            BatteryCount_Millionen = 30,
            BatteryCapacity_kWh = 40,
            MaxAllowedDrainFactor = 0.05d,
            SolarFactor = 3,
            WindFactor = 2,
        };

        var result = await ScenarioService.Calculate(scenario);

        s.Stop();
        Logger.LogInformation("{Elapsed}ms", s.ElapsedMilliseconds);

        _scenarioResult = result;

    //_production = vals.First().Value.Select(item => new SeriesItem(item.Time, item.Time.DayOfWeek is DayOfWeek.Saturday ? null : item.Value, item.Resolution)).Where(item => item.Value != null).ToList();
    //StateHasChanged();
    //await Task.Delay(1000);

        Logger.LogInformation("Fetched Entries ({Count})", result.Rows.Count);
        if (_chartRef != null)
        {
            Logger.LogInformation("Updating Series");
            StateHasChanged();
    //await Task.Delay(3000);

            await _chartRef.ResetSeriesAsync(true, true);
            await _chartRef.UpdateSeriesAsync(false);
            await _chartRef.UpdateOptionsAsync(true, false, true);
        }
    }

    private void SetOneWeek()
    {
        StartDate = EndDate.AddDays(-6);
    }

    private void SetYesterday()
    {
        EndDate = DateTime.Today;
    }
}